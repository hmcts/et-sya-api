#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl

//@Library("Infrastructure")
@Library("Infrastructure@performance-stages-evaluation") _   //add-perftest-vars  //test-performance-repo

def type = "java"
def product = "et"
def component = "sya-api"
def branchesToSync = ['demo', 'ithc']

def secrets = [
    'et-${env}': [
        secret('perf-synthetic-monitor-token', 'PERF_SYNTHETIC_MONITOR_TOKEN'),
        secret('perf-metrics-token', 'PERF_METRICS_TOKEN'),
        secret('perf-event-token', 'PERF_EVENT_TOKEN'),
        secret('perf-synthetic-update-token', 'PERF_SYNTHETIC_UPDATE_TOKEN')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  disableLegacyDeployment()
  enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  syncBranchesWithMaster(branchesToSync)
  enablePerformanceTestStages(timeout: 60)
  //enableSlackNotifications('#et-builds')

  //Enable Gatling test stages
  enableGatlingLoadTests([
    repo: 'https://github.com/hmcts/performance-testing.git', //https://github.com/hmcts/et-performance.git
    branch: 'add-et-tests', //*SHould be master //add-buildpipeline-code employmenttribunal-updates
    simulation: 'et.simulations.EtApiSimulation', // ETCreateClaim
    users: 5,
    rampDuration: '60s',
    testDuration: '300s',
    timeout: 10
  ])

  //Enable SRG evaluation
  enableSrgEvaluation([
    serviceName: 'et-sya-service',
    failureBehavior: 'warn'
  ])

  before('smoketest:preview') {
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.FT_SYA_URL = "https://et-sya-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
  }

  before('gatlingLoadTests:preview') {
    env.CCD_DATA_STORE_API_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
  }

  before('functionalTest:preview') {
    env.MAX_FT_TESTS_PARALLEL_FORKS = 5
    env.ENABLE_TEST_USER_DELETION = true
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
  }

   afterAlways('functionalTest:preview') {

        stage("Temp Wait to keep Pods") {
            sleep 1200
        }
   }

  before('smoketest:aat') {
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.FT_SYA_URL = "https://et-sya-api-staging.aat.platform.hmcts.net/"
  }

  before('functionalTest:aat') {
    env.INITIATION_JOB_RUNNING = false
    env.MAX_FT_TESTS_PARALLEL_FORKS = 5
    env.ENABLE_TEST_USER_DELETION = true
  }

  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
  }








  

}
