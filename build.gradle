plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '2.7.18'
  id 'org.owasp.dependencycheck' version '12.0.2'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '6.0.1.5171'
  id 'hmcts.ccd.sdk' version '5.5.16'
  id 'au.com.dius.pact' version '4.3.15'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  apply plugin: 'au.com.dius.pact'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly

  contractTestImplementation.extendsFrom testImplementation
  contractTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task contract(type: Test) {
  useJUnitPlatform()
  description = "Runs pact contract tests"
  group = "Delivery pipeline"
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.21.0'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest,
                sourceSets.smokeTest, sourceSets.contractTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
  "**/gov/hmcts/reform/et/syaapi/config/**",
  "**/gov/hmcts/reform/et/syaapi/SyaApiApplication.java",
  "**/gov/hmcts/reform/et/syaapi/service/VerifyTokenService.java"
]

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: et-sya-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:et-sya-api"
    property "sonar.coverage.exclusions", sonarExclusions.join(', ')
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  reformLoggingVersion = "5.1.9"
  log4JVersion = "2.24.3"
}

dependencies {

  implementation group: 'com.github.hmcts', name: 'et-data-model', version:'3.18.28'
  implementation('com.github.hmcts:et-common:2.5.3') { transitive = false }
  implementation group: 'uk.gov.dwp.regex', name: 'postcode-validation', version: '1.1.0'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.9', {
    exclude group: 'commons-io', module: 'commons-io'
  }

  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
  implementation group: 'org.springframework.retry', name: 'spring-retry', version: '2.0.11'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.18.2'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.2'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.8.0'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.8'

  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '4.9.2'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.3'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.1.2'

  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '4.1.1-RELEASE'
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'com.google.guava', name: 'guava', version: '33.4.0-jre'

  implementation 'org.apache.tika:tika-core:3.1.0'

  implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '3.0.0-RC1'
  // Log4J core added to remove startup error message
  implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '10.0.1'

  implementation group: 'org.elasticsearch', name: 'elasticsearch', version: '8.17.1'
  implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.7.18'
  implementation 'org.json:json:20250107'
  implementation group: 'org.yaml', name: 'snakeyaml', version: '2.3'

  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.98'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '11.0.3'

  implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: '6.4.2'

  implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '7.7.0'

  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.13'
  implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.13'

  compileOnly 'org.projectlombok:lombok'
  annotationProcessor group: 'org.projectlombok', name: 'lombok'
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok'
  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok'
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok'

  testImplementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.5'
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
  testImplementation(platform('org.junit:junit-bom:5.11.4'))
  testImplementation group: 'org.projectlombok', name: 'lombok'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    exclude group: 'com.vaadin.external.google', module: 'android-json'
  }
  testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.17.5'
  testImplementation('org.assertj:assertj-core:3.27.3')
  testImplementation group: 'io.rest-assured', name: 'rest-assured'
  testImplementation group: 'net.javacrumbs.json-unit', name: 'json-unit', version: '4.1.0'

  testImplementation 'com.github.hmcts:fortify-client:1.4.7:all'

  // Pact Contract Tests
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: '4.1.41'
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: '4.1.41'
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.11.4'
  contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.11.4'
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.11.4'
  contractTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.11.4'

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.et.syaapi.SyaApiApplication'

bootJar {
  archiveFileName = "et-sya-api.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}


wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

task runAndPublishConsumerPactTests(type: Test) {
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
}

task fortifyScan(type: JavaExec) {
  // main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  mainClass.set("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

pact {
  publish {
    pactDirectory = 'pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'https://pact-broker.platform.hmcts.net/'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: getCheckedOutGitCommitHash(), 'latest']
    version = project.pactVersion
  }
}

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}
